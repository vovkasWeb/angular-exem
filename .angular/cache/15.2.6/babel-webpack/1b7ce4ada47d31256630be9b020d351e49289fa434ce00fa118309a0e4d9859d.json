{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../shared.service\";\nimport * as i3 from \"@angular/common\";\nfunction SecondComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"p\", 3);\n    i0.ɵɵlistener(\"click\", function SecondComponent_div_1_Template_p_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.getAsteroidName());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 4);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 4);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"img\", 5);\n    i0.ɵɵelementStart(8, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function SecondComponent_div_1_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.lastImage());\n    });\n    i0.ɵɵtext(9, \"\\u043F\\u0440\\u0435\\u0434\\u044B\\u0434\\u0443\\u0449\\u0438\\u0435\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function SecondComponent_div_1_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.nextImage());\n    });\n    i0.ɵɵtext(11, \"\\u0441\\u043B\\u0435\\u0434\\u0443\\u0449\\u0438\\u0435\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.getAsteroidName());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.getMinEstimatedDiameter());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.getMaxEstimatedDiameter());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r0.urls[ctx_r0.currentIndex], i0.ɵɵsanitizeUrl);\n  }\n}\nexport class SecondComponent {\n  constructor(http, sharedService) {\n    this.http = http;\n    this.sharedService = sharedService;\n    this.currentIndex = 0;\n    this.urls = [];\n    this.asteroidData = [];\n    this.isFetchingImages = true;\n    this.urls = [];\n  }\n  ngOnInit() {\n    this.http.get(`https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=${this.sharedService.key}&count=100`).subscribe(data => {\n      console.log(data);\n      const response = data;\n      const asteroids = response.near_earth_objects['2015-09-07'];\n      this.asteroidData = asteroids;\n      this.fetchAsteroidImages().subscribe(urls => {\n        this.urls = urls;\n        this.isFetchingImages = false;\n      });\n    });\n  }\n  fetchAsteroidImages() {\n    const imageRequests = [];\n    for (const asteroid of this.asteroidData) {\n      console.log(asteroid.close_approach_data);\n      for (const closeApproachData of asteroid.close_approach_data) {\n        const formattedDate = closeApproachData.close_approach_date;\n        const url = `https://api.nasa.gov/planetary/apod?api_key=${this.sharedService.key}&date=${formattedDate}`;\n        imageRequests.push(this.http.get(url).pipe(map(data => data.url)));\n      }\n    }\n    return forkJoin(imageRequests);\n  }\n  nextImage() {\n    if (!this.isFetchingImages) {\n      if (this.currentIndex < this.urls.length - 1) {\n        this.currentIndex++;\n      } else {\n        this.currentIndex = 0;\n      }\n    }\n  }\n  lastImage() {\n    if (!this.isFetchingImages) {\n      if (this.currentIndex > 0) {\n        this.currentIndex--;\n      } else {\n        this.currentIndex = this.urls.length - 1;\n      }\n    }\n  }\n  getAsteroidName() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].name;\n    }\n    return '';\n  }\n  getMaxEstimatedDiameter() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].estimated_diameter.kilometers.estimated_diameter_max;\n    }\n    return '';\n  }\n  getMinEstimatedDiameter() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].estimated_diameter.kilometers.estimated_diameter_min;\n    }\n    return '';\n  }\n}\nSecondComponent.ɵfac = function SecondComponent_Factory(t) {\n  return new (t || SecondComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SharedService));\n};\nSecondComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SecondComponent,\n  selectors: [[\"app-second\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"container\"], [\"class\", \"button-wrapper\", 4, \"ngIf\"], [1, \"button-wrapper\"], [1, \"text\", 3, \"click\"], [1, \"text\"], [\"alt\", \"Asteroid Image\", 3, \"src\"], [1, \"button\", \"button-left\", 3, \"click\"], [1, \"button\", \"button-right\", 3, \"click\"]],\n  template: function SecondComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, SecondComponent_div_1_Template, 12, 4, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.asteroidData && ctx.asteroidData.length > 0);\n    }\n  },\n  dependencies: [i3.NgIf],\n  styles: [\".container[_ngcontent-%COMP%] {\\r\\n    position: relative;\\r\\n  }\\r\\n  \\r\\n  .text[_ngcontent-%COMP%] {\\r\\n    margin-left: 35px;\\r\\n    margin-right: 35px;\\r\\n  }\\r\\n  \\r\\n  .button-wrapper[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n    text-align: center;\\r\\n  }\\r\\n  \\r\\n  .button[_ngcontent-%COMP%] {\\r\\n    padding: 10px;\\r\\n    border-radius: 5px;\\r\\n    border: none;\\r\\n    color: #fff;\\r\\n    font-weight: bold;\\r\\n    height: 700px;\\r\\n    width: 35px;\\r\\n    display: inline-block;\\r\\n  }\\r\\n  \\r\\n  .button-left[_ngcontent-%COMP%] {\\r\\n    float: left;\\r\\n    height: auto;\\r\\n    width: 100px;\\r\\n    background-color: #007bff;\\r\\n  }\\r\\n  .button-left[_ngcontent-%COMP%]:hover {\\r\\n    float: left;\\r\\n    height: auto;\\r\\n    width: 100px;\\r\\n    background-color: #0959ad;\\r\\n  }\\r\\n  \\r\\n  .button-right[_ngcontent-%COMP%] {\\r\\n    float: right;\\r\\n    height: auto;\\r\\n    width: 100px;\\r\\n    background-color: #dc3545;\\r\\n  }\\r\\n  .button-right[_ngcontent-%COMP%]:hover {\\r\\n    float: right;\\r\\n    height: auto;\\r\\n    width: 100px;\\r\\n    background-color: #992632;\\r\\n  }\\r\\n  \\r\\n  #photo[_ngcontent-%COMP%] {\\r\\n    display: inline-block;\\r\\n    width: auto;\\r\\n    height: auto;\\r\\n    margin: 0 auto;\\r\\n    max-width: 80%;\\r\\n    max-height: 1080px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2Vjb25kL3NlY29uZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsaUJBQWlCO0lBQ2pCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLFdBQVc7SUFDWCxrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixXQUFXO0lBQ1gsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixXQUFXO0lBQ1gscUJBQXFCO0VBQ3ZCOztFQUVBO0lBQ0UsV0FBVztJQUNYLFlBQVk7SUFDWixZQUFZO0lBQ1oseUJBQXlCO0VBQzNCO0VBQ0E7SUFDRSxXQUFXO0lBQ1gsWUFBWTtJQUNaLFlBQVk7SUFDWix5QkFBeUI7RUFDM0I7O0VBRUE7SUFDRSxZQUFZO0lBQ1osWUFBWTtJQUNaLFlBQVk7SUFDWix5QkFBeUI7RUFDM0I7RUFDQTtJQUNFLFlBQVk7SUFDWixZQUFZO0lBQ1osWUFBWTtJQUNaLHlCQUF5QjtFQUMzQjs7RUFFQTtJQUNFLHFCQUFxQjtJQUNyQixXQUFXO0lBQ1gsWUFBWTtJQUNaLGNBQWM7SUFDZCxjQUFjO0lBQ2Qsa0JBQWtCO0VBQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgfVxyXG4gIFxyXG4gIC50ZXh0IHtcclxuICAgIG1hcmdpbi1sZWZ0OiAzNXB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAzNXB4O1xyXG4gIH1cclxuICBcclxuICAuYnV0dG9uLXdyYXBwZXIge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4gIFxyXG4gIC5idXR0b24ge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBoZWlnaHQ6IDcwMHB4O1xyXG4gICAgd2lkdGg6IDM1cHg7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgfVxyXG4gIFxyXG4gIC5idXR0b24tbGVmdCB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIGhlaWdodDogYXV0bztcclxuICAgIHdpZHRoOiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XHJcbiAgfVxyXG4gIC5idXR0b24tbGVmdDpob3ZlciB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIGhlaWdodDogYXV0bztcclxuICAgIHdpZHRoOiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwOTU5YWQ7XHJcbiAgfVxyXG4gIFxyXG4gIC5idXR0b24tcmlnaHQge1xyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgd2lkdGg6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NTtcclxuICB9XHJcbiAgLmJ1dHRvbi1yaWdodDpob3ZlciB7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBoZWlnaHQ6IGF1dG87XHJcbiAgICB3aWR0aDogMTAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTkyNjMyO1xyXG4gIH1cclxuICBcclxuICAjcGhvdG8ge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgd2lkdGg6IGF1dG87XHJcbiAgICBoZWlnaHQ6IGF1dG87XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIG1heC13aWR0aDogODAlO1xyXG4gICAgbWF4LWhlaWdodDogMTA4MHB4O1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["forkJoin","map","i0","SecondComponent","constructor","http","sharedService","urls","ngOnInit","get","key","subscribe","data","console","log","response","asteroids","near_earth_objects","asteroidData","fetchAsteroidImages","isFetchingImages","imageRequests","asteroid","close_approach_data","closeApproachData","formattedDate","close_approach_date","url","push","pipe","nextImage","currentIndex","length","lastImage","getAsteroidName","name","getMaxEstimatedDiameter","estimated_diameter","kilometers","estimated_diameter_max","getMinEstimatedDiameter","estimated_diameter_min","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\VovkasWeb\\angular-session\\src\\app\\second\\second.component.ts","C:\\Users\\VovkasWeb\\angular-session\\src\\app\\second\\second.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SharedService } from '../shared.service';\r\n// API KEY - 4O7kxB74PxdUdOoK17f0pcqLZn4kJAmUDJrWYgbt\r\n\r\ninterface Asteroid {\r\n  id: string;\r\n  name: string;\r\n  absolute_magnitude_h: number;\r\n  estimated_diameter: {\r\n    kilometers: {\r\n      estimated_diameter_min: number;\r\n      estimated_diameter_max: number;\r\n    };\r\n  };\r\n  close_approach_data: {\r\n    close_approach_date: string;\r\n    relative_velocity: {\r\n      kilometers_per_hour: number;\r\n    };\r\n    miss_distance: {\r\n      kilometers: number;\r\n    };\r\n  }[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-second',\r\n  templateUrl: './second.component.html',\r\n  styleUrls: ['./second.component.css']\r\n})\r\nexport class SecondComponent {\r\n  public currentIndex: number = 0;\r\n  public urls: string[] = [];\r\n  public asteroidData: Asteroid[] = [];\r\n  public isFetchingImages: boolean = true;\r\n\r\n  constructor(private http: HttpClient, private sharedService: SharedService) {\r\n    this.urls = [];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.http\r\n      .get(`https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=${this.sharedService.key}&count=100`)\r\n      .subscribe((data: any) => {\r\n        console.log(data)\r\n        const response: any = data;\r\n        const asteroids: Asteroid[] = response.near_earth_objects['2015-09-07'];\r\n        this.asteroidData = asteroids;\r\n        this.fetchAsteroidImages().subscribe((urls: string[]) => {\r\n          this.urls = urls;\r\n          this.isFetchingImages = false;\r\n        });\r\n      });\r\n  }\r\n\r\n  private fetchAsteroidImages() {\r\n    const imageRequests = [];\r\n\r\n    for (const asteroid of this.asteroidData) {\r\n      console.log(asteroid.close_approach_data)\r\n      for (const closeApproachData of asteroid.close_approach_data) {\r\n        const formattedDate = closeApproachData.close_approach_date;\r\n        const url = `https://api.nasa.gov/planetary/apod?api_key=${this.sharedService.key}&date=${formattedDate}`;\r\n        imageRequests.push(this.http.get(url).pipe(\r\n          map((data: any) => data.url)\r\n        ));\r\n      }\r\n    }\r\n    return forkJoin(imageRequests);\r\n  }\r\n\r\n  public nextImage() {\r\n    if (!this.isFetchingImages) {\r\n      if (this.currentIndex < this.urls.length - 1) {\r\n        this.currentIndex++;\r\n      } else {\r\n        this.currentIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  public lastImage() {\r\n    if (!this.isFetchingImages) {\r\n      if (this.currentIndex > 0) {\r\n        this.currentIndex--;\r\n      } else {\r\n        this.currentIndex = this.urls.length - 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAsteroidName() {\r\n    if (this.asteroidData && this.asteroidData.length > 0) {\r\n      return this.asteroidData[this.currentIndex].name;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public getMaxEstimatedDiameter() {\r\n    if (this.asteroidData && this.asteroidData.length > 0) {\r\n      return this.asteroidData[this.currentIndex].estimated_diameter.kilometers.estimated_diameter_max;\r\n    }\r\n    return '';\r\n  }\r\n  public getMinEstimatedDiameter() {\r\n    if (this.asteroidData && this.asteroidData.length > 0) {\r\n      return this.asteroidData[this.currentIndex].estimated_diameter.kilometers.estimated_diameter_min;\r\n    }\r\n    return '';\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"button-wrapper\" *ngIf=\"asteroidData && asteroidData.length > 0\">\r\n    <p class=\"text\" (click)=\"getAsteroidName()\">{{ getAsteroidName() }}</p>\r\n    <p class=\"text\">{{ getMinEstimatedDiameter() }}</p>\r\n    <p class=\"text\">{{ getMaxEstimatedDiameter() }}</p>\r\n    <img [src]=\"urls[currentIndex]\" alt=\"Asteroid Image\" />\r\n    <button class=\"button button-left\" (click)=\"lastImage()\">предыдущие</button>\r\n    <button class=\"button button-right\" (click)=\"nextImage()\">следущие</button>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}